#! /usr/bin/env python
# coding=utf-8

'''
tunetctl: TUNet CLI
Command line tool for Tsinghua University net login
by SyiMyuZya <syimyuzya@gmail.com>
'''

from __future__ import print_function, unicode_literals

# check if `python` points to a newer version rather than Python 2
import sys
if sys.version_info>=(3,):
    print('A newer version of Python detected, switching to Python 2...')
    import os
    os.execl('/usr/bin/env', '/usr/bin/env', 'python2', *sys.argv)


import argparse
import json
import os
import struct
import sys
import uuid

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from datetime import datetime, timedelta
from getpass import getpass
from hashlib import md5
from socket import socket, AF_INET, SOCK_DGRAM
from urllib import urlencode
from urllib2 import urlopen

try:
    import readline
except ImportError:
    pass



########

# hosts, ports and URLs

URL_HOST = 'https://net.tsinghua.edu.cn/'
URL_LOGIN = URL_HOST + '/do_login.php'
URL_INFO = URL_HOST + '/rad_user_info.php'



########

# utilities

def sizeof_fmt(num, suffix='B', si=False):
    if si:
        units = ('','k','M','G','T','P','E','Z')
        last = 'Y'
        base = 1000.0
    else:
        units = ('','Ki','Mi','Gi','Ti','Pi','Ei','Zi')
        last = 'Yi'
        base = 1024.0
    for unit in units:
        if abs(num) < base:
            return "%.2f %s%s" % (num, unit, suffix)
        num /= base
    return "%.2f %s%s" % (num, last, suffix)


def duration_fmt(num):
    units = [('s', 60), ('m', 60), ('h', 24), ('d', None)]
    rt = []
    for unit, limit in units:
        rt.append('{:d}{}'.format(num%limit if limit else num, unit))
        if limit is None:
            break
        num //= limit
        if num==0:
            break
    return ' '.join(reversed(rt))



########

# net utilities

def check():
    '''
    check if this device is online.
    '''
    return urlopen(URL_LOGIN, b'action=check_online').read()


def get_status():
    '''
    Get verbosed online status of this device.
    '''
    return urlopen(URL_INFO).read().split(b',')


def login(username, password):
    '''
    Login with username and password(encrypted).
    
    This function does not need the raw password.
    '''
    return urlopen(URL_LOGIN, urlencode({
        'action': 'login',
        'username': username,
        'password': '{MD5_HEX}' + password,
        'ac_id': '1'
    })).read()


def logout():
    '''
    Logout.
    '''
    return urlopen(URL_LOGIN, b'action=logout').read()



########

# interface

def show_status():
    print('Current status:')
    status = get_status()
    if len(status)==1 and status[0]==b'':
        print('  (offline)')
    else:
        def require_int(func):
            def fn(s):
                try:
                    _ = int(s)
                except ValueError as e:
                    return s
                return func(s)
            return fn
        @require_int
        def fmtsize(s):
            return '{} ({:,} B)'.format(sizeof_fmt(int(s), si=True), int(s))
        @require_int
        def fmttime(s):
            return '{} ({})'.format((datetime.utcfromtimestamp(int(s)) + \
                    timedelta(hours=8)).strftime('%Y-%m-%d %H:%M:%S'), s)
        @require_int
        def fmtduration(s):
            return '{} ({:,} s)'.format(duration_fmt(int(s)), int(s))

        items = [
                ('Username', None),
                ('Time of login', fmttime),
                ('Time of query', fmttime),
                ('Session traffic incoming', fmtsize),
                ('Session traffic outgoing', fmtsize),
                (None, None),  # 5
                ('Cumulative traffic', fmtsize),
                ('Cumulative online time', fmtduration),
                ('IPv4 Address', None),
                (None, None),  # 9
                (None, None),  # 10
                ('Balance', lambda x: '{:.4f}'.format(float(x))),
                (None, None),  # 12
                ]
        padding_tpl = '{:<25}'
        for i, item in enumerate(items):
            print('  ', end='')
            print(padding_tpl.format(item[0] if item[0] else '(Unknown #{})'.format(i)), end=': ')
            print(status[i] if not item[1] else item[1](status[i]))
    return 0


def do_login(args):
    if args.file:
        user = json.load(args.file)
    else:
        user = {}
        user['name'] = unicode(raw_input('User: '))
        user['pass'] = unicode(md5(getpass()).hexdigest())
    if args.save:
        json.dump(user, open(args.save, 'w'))
        print('Username & password saved to {}'.format(args.save))

    res = login(user['name'], user['pass'])
    print('Server response:', res)
    show_status()
    return 0 if res==b'Login is successful.' else 1


def do_logout(args):
    res = logout()
    print('Server response:', res)
    return 0 if res==b'Logout is successful.' else 1


PROG_USAGE = '''\
%(prog)s [-h] [-v] [[-l] [-s [FILE] | -f [FILE]] | -o]
'''
PROG_DESCRIPTION = '''\
TUNet Authorisation Command Line Tool
'''
PROG_AUTHOR = '''\
by SyiMyuZya <syimyuzya@gmail.com>
'''
PROG_VERSION = '''\
version 0.4.0
'''
PROG_EPILOG = '''\
if run without any option, show current connection status of this device
'''
DEFAULT_FILE = os.path.join('~', '.tunet')

def main():
    try:
        parser = ArgumentParser(usage=PROG_USAGE,
                description=PROG_DESCRIPTION+PROG_AUTHOR,
                epilog=PROG_EPILOG, formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument('-v', '--version', action='version',
                version=PROG_DESCRIPTION+PROG_VERSION)

        action_group = parser.add_argument_group('actions')
        action_group.add_argument('-l', '--login', action='store_true',
                help='''login (prompt for username and password
                if no file specified)''')

        login_group = parser.add_argument_group('login options (imply -l)')
        login_egroup = login_group.add_mutually_exclusive_group()
        login_egroup.add_argument('-s', '--save', nargs='?',
                const=os.path.expanduser(DEFAULT_FILE), metavar='FILE',
                help='''login and save username and (hashed) password to FILE
                (default: {})'''.format(DEFAULT_FILE))
        login_egroup.add_argument('-f', '--file', type=file, nargs='?',
                const=os.path.expanduser(DEFAULT_FILE),
                help='''login with username and password from saved FILE
                (default: {})'''.format(DEFAULT_FILE))

        action_group.add_argument('-o', '--logout', action='store_true',
                help='''logout''')

        # deprecated option
        parser.add_argument('-d', '--default', action='store_true',
                help=argparse.SUPPRESS)

        args = parser.parse_args()

        if args.default:
            parser.error('-d is deprecated, use -f without argument instead')

        if args.file or args.save:
            args.login = True

        if args.login and args.logout:
            parser.error('cannot perform multiple actions: login, logout')

        if args.login:
            res = do_login(args)
        elif args.logout:
            res = do_logout(args)
        else:
            res = show_status()
        sys.exit(res)
    except KeyboardInterrupt:
        print('Canceled', file=sys.stderr)


if __name__=='__main__':
    main()

# vim: ts=4 sw=4 et
